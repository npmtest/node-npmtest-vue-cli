{"/home/travis/build/npmtest/node-npmtest-vue-cli/test.js":"/* istanbul instrument in package npmtest_vue_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-cli/lib.npmtest_vue_cli.js":"/* istanbul instrument in package npmtest_vue_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_vue_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_vue_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-vue-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_vue_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_vue_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_vue_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_vue_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_vue_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_vue_cli.__dirname +\n                    '/lib.npmtest_vue_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/ask.js":"var async = require('async')\nvar inquirer = require('inquirer')\nvar evaluate = require('./eval')\n\n// Support types from prompt-for which was used before\nvar promptMapping = {\n  string: 'input',\n  boolean: 'confirm'\n}\n\n/**\n * Ask questions, return results.\n *\n * @param {Object} prompts\n * @param {Object} data\n * @param {Function} done\n */\n\nmodule.exports = function ask (prompts, data, done) {\n  async.eachSeries(Object.keys(prompts), function (key, next) {\n    prompt(data, key, prompts[key], next)\n  }, done)\n}\n\n/**\n * Inquirer prompt wrapper.\n *\n * @param {Object} data\n * @param {String} key\n * @param {Object} prompt\n * @param {Function} done\n */\n\nfunction prompt (data, key, prompt, done) {\n  // skip prompts whose when condition is not met\n  if (prompt.when && !evaluate(prompt.when, data)) {\n    return done()\n  }\n\n  var promptDefault = prompt.default\n  if (typeof prompt.default === 'function') {\n    promptDefault = function () {\n      return prompt.default.bind(this)(data)\n    }\n  }\n\n  inquirer.prompt([{\n    type: promptMapping[prompt.type] || prompt.type,\n    name: key,\n    message: prompt.message || prompt.label || key,\n    default: promptDefault,\n    choices: prompt.choices || [],\n    validate: prompt.validate || function () { return true }\n  }], function (answers) {\n    if (Array.isArray(answers[key])) {\n      data[key] = {}\n      answers[key].forEach(function (multiChoiceAnswer) {\n        data[key][multiChoiceAnswer] = true\n      })\n    } else {\n      data[key] = answers[key]\n    }\n    done()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/eval.js":"var chalk = require('chalk')\n\n/**\n * Evaluate an expression in meta.json in the context of\n * prompt answers data.\n */\n\nmodule.exports = function evalualte (exp, data) {\n  /* eslint-disable no-new-func */\n  var fn = new Function('data', 'with (data) { return ' + exp + '}')\n  try {\n    return fn(data)\n  } catch (e) {\n    console.error(chalk.red('Error when evaluating filter condition: ' + exp))\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/check-version.js":"var request = require('request')\nvar semver = require('semver')\nvar chalk = require('chalk')\nvar packageConfig = require('../package.json')\n\nmodule.exports = function (done) {\n  // Ensure minimum supported node version is used\n  if (!semver.satisfies(process.version, packageConfig.engines.node)) {\n    return console.log(chalk.red(\n      '  You must upgrade node to >=' + packageConfig.engines.node + '.x to use vue-cli'\n    ))\n  }\n\n  request({\n    url: 'https://registry.npmjs.org/vue-cli',\n    timeout: 1000\n  }, function (err, res, body) {\n    if (!err && res.statusCode === 200) {\n      var latestVersion = JSON.parse(body)['dist-tags'].latest\n      var localVersion = packageConfig.version\n      if (semver.lt(localVersion, latestVersion)) {\n        console.log(chalk.yellow('  A newer version of vue-cli is available.'))\n        console.log()\n        console.log('  latest:    ' + chalk.green(latestVersion))\n        console.log('  installed: ' + chalk.red(localVersion))\n        console.log()\n      }\n    }\n    done()\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/filter.js":"var match = require('minimatch')\nvar evaluate = require('./eval')\n\nmodule.exports = function (files, filters, data, done) {\n  if (!filters) {\n    return done()\n  }\n  var fileNames = Object.keys(files)\n  Object.keys(filters).forEach(function (glob) {\n    fileNames.forEach(function (file) {\n      if (match(file, glob, { dot: true })) {\n        var condition = filters[glob]\n        if (!evaluate(condition, data)) {\n          delete files[file]\n        }\n      }\n    })\n  })\n  done()\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/generate.js":"var Metalsmith = require('metalsmith')\nvar Handlebars = require('handlebars')\nvar async = require('async')\nvar render = require('consolidate').handlebars.render\nvar path = require('path')\nvar multimatch = require('multimatch')\nvar getOptions = require('./options')\nvar ask = require('./ask')\nvar filter = require('./filter')\n\n// register handlebars helper\nHandlebars.registerHelper('if_eq', function (a, b, opts) {\n  return a === b\n    ? opts.fn(this)\n    : opts.inverse(this)\n})\n\nHandlebars.registerHelper('unless_eq', function (a, b, opts) {\n  return a === b\n    ? opts.inverse(this)\n    : opts.fn(this)\n})\n\n/**\n * Generate a template given a `src` and `dest`.\n *\n * @param {String} name\n * @param {String} src\n * @param {String} dest\n * @param {Function} done\n */\n\nmodule.exports = function generate (name, src, dest, done) {\n  var opts = getOptions(name, src)\n  var metalsmith = Metalsmith(path.join(src, 'template'))\n  var data = Object.assign(metalsmith.metadata(), {\n    destDirName: name,\n    inPlace: dest === process.cwd(),\n    noEscape: true\n  })\n  opts.helpers && Object.keys(opts.helpers).map(function (key) {\n    Handlebars.registerHelper(key, opts.helpers[key])\n  })\n  metalsmith\n    .use(askQuestions(opts.prompts))\n    .use(filterFiles(opts.filters))\n    .use(renderTemplateFiles(opts.skipInterpolation))\n    .clean(false)\n    .source('.') // start from template root instead of `./src` which is Metalsmith's default for `source`\n    .destination(dest)\n    .build(function (err) {\n      done(err)\n      logMessage(opts.completeMessage, data)\n    })\n\n  return data\n}\n\n/**\n * Create a middleware for asking questions.\n *\n * @param {Object} prompts\n * @return {Function}\n */\n\nfunction askQuestions (prompts) {\n  return function (files, metalsmith, done) {\n    ask(prompts, metalsmith.metadata(), done)\n  }\n}\n\n/**\n * Create a middleware for filtering files.\n *\n * @param {Object} filters\n * @return {Function}\n */\n\nfunction filterFiles (filters) {\n  return function (files, metalsmith, done) {\n    filter(files, filters, metalsmith.metadata(), done)\n  }\n}\n\n/**\n * Template in place plugin.\n *\n * @param {Object} files\n * @param {Metalsmith} metalsmith\n * @param {Function} done\n */\n\nfunction renderTemplateFiles (skipInterpolation) {\n  skipInterpolation = typeof skipInterpolation === 'string'\n    ? [skipInterpolation]\n    : skipInterpolation\n  return function (files, metalsmith, done) {\n    var keys = Object.keys(files)\n    var metalsmithMetadata = metalsmith.metadata()\n    async.each(keys, function (file, next) {\n      // skipping files with skipInterpolation option\n      if (skipInterpolation && multimatch([file], skipInterpolation, { dot: true }).length) {\n        return next()\n      }\n      var str = files[file].contents.toString()\n      // do not attempt to render files that do not have mustaches\n      if (!/{{([^{}]+)}}/g.test(str)) {\n        return next()\n      }\n      render(str, metalsmithMetadata, function (err, res) {\n        if (err) return next(err)\n        files[file].contents = new Buffer(res)\n        next()\n      })\n    }, done)\n  }\n}\n\n/**\n * Display template complete message.\n *\n * @param {String} message\n * @param {Object} data\n */\n\nfunction logMessage (message, data) {\n  if (!message) return\n  render(message, data, function (err, res) {\n    if (err) {\n      console.error('\\n   Error when rendering template complete message: ' + err.message.trim())\n    } else {\n      console.log('\\n' + res.split(/\\r?\\n/g).map(function (line) {\n        return '   ' + line\n      }).join('\\n'))\n    }\n  })\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/options.js":"var path = require('path')\nvar metadata = require('read-metadata')\nvar exists = require('fs').existsSync\nvar getGitUser = require('./git-user')\nvar validateName = require('validate-npm-package-name')\n\n/**\n * Read prompts metadata.\n *\n * @param {String} dir\n * @return {Object}\n */\n\nmodule.exports = function options (name, dir) {\n  var opts = getMetadata(dir)\n\n  setDefault(opts, 'name', name)\n  setValidateName(opts)\n\n  var author = getGitUser()\n  if (author) {\n    setDefault(opts, 'author', author)\n  }\n\n  return opts\n}\n\n/**\n * Gets the metadata from either a meta.json or meta.js file.\n *\n * @param  {String} dir\n * @return {Object}\n */\n\nfunction getMetadata (dir) {\n  var json = path.join(dir, 'meta.json')\n  var js = path.join(dir, 'meta.js')\n  var opts = {}\n\n  if (exists(json)) {\n    opts = metadata.sync(json)\n  } else if (exists(js)) {\n    var req = require(path.resolve(js))\n    if (req !== Object(req)) {\n      throw new Error('meta.js needs to expose an object')\n    }\n    opts = req\n  }\n\n  return opts\n}\n\n/**\n * Set the default value for a prompt question\n *\n * @param {Object} opts\n * @param {String} key\n * @param {String} val\n */\n\nfunction setDefault (opts, key, val) {\n  if (opts.schema) {\n    opts.prompts = opts.schema\n    delete opts.schema\n  }\n  var prompts = opts.prompts || (opts.prompts = {})\n  if (!prompts[key] || typeof prompts[key] !== 'object') {\n    prompts[key] = {\n      'type': 'string',\n      'default': val\n    }\n  } else {\n    prompts[key]['default'] = val\n  }\n}\n\nfunction setValidateName (opts) {\n  var name = opts.prompts.name\n  var customValidate = name.validate\n  name.validate = function (name) {\n    var its = validateName(name)\n    if (!its.validForNewPackages) {\n      var errors = (its.errors || []).concat(its.warnings || [])\n      return 'Sorry, ' + errors.join(' and ') + '.'\n    }\n    if (typeof customValidate === 'function') return customValidate(name)\n    return true\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/git-user.js":"var exec = require('child_process').execSync\n\nmodule.exports = function () {\n  var name\n  var email\n\n  try {\n    name = exec('git config --get user.name')\n    email = exec('git config --get user.email')\n  } catch (e) {}\n\n  name = name && JSON.stringify(name.toString().trim()).slice(1, -1)\n  email = email && (' <' + email.toString().trim() + '>')\n  return (name || '') + (email || '')\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/loaders.js":"// https://github.com/vuejs-templates/webpack/blob/master/template/build/utils.js\nvar ExtractTextPlugin = require('extract-text-webpack-plugin')\n\nexports.cssLoaders = function (options) {\n  options = options || {}\n  // generate loader string to be used with extract text plugin\n  function generateLoaders (loaders) {\n    var sourceLoader = loaders.map(function (loader) {\n      var extraParamChar\n      if (/\\?/.test(loader)) {\n        loader = loader.replace(/\\?/, '-loader?')\n        extraParamChar = '&'\n      } else {\n        loader = loader + '-loader'\n        extraParamChar = '?'\n      }\n      return loader + (options.sourceMap ? extraParamChar + 'sourceMap' : '')\n    }).join('!')\n\n    // Extract CSS when that option is specified\n    // (which is the case during production build)\n    if (options.extract) {\n      return ExtractTextPlugin.extract({\n        loader: sourceLoader,\n        fallbackLoader: 'vue-style-loader'\n      })\n    } else {\n      return ['vue-style-loader', sourceLoader].join('!')\n    }\n  }\n\n  // http://vuejs.github.io/vue-loader/en/configurations/extract-css.html\n  return {\n    css: generateLoaders(['css?-autoprefixer', 'postcss']),\n    less: generateLoaders(['css?-autoprefixer', 'postcss', 'less']),\n    sass: generateLoaders(['css?-autoprefixer', 'postcss', 'sass?indentedSyntax']),\n    scss: generateLoaders(['css?-autoprefixer', 'postcss', 'sass']),\n    stylus: generateLoaders(['css?-autoprefixer', 'postcss', 'stylus']),\n    styl: generateLoaders(['css?-autoprefixer', 'postcss', 'stylus'])\n  }\n}\n\n// Generate loaders for standalone style files (outside of .vue)\nexports.styleLoaders = function (options) {\n  var output = []\n  var loaders = exports.cssLoaders(options)\n  for (var extension in loaders) {\n    var loader = loaders[extension]\n    output.push({\n      test: new RegExp('\\\\.' + extension + '$'),\n      loader: loader\n    })\n  }\n  return output\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/logger.js":"var chalk = require('chalk')\nvar format = require('util').format\n\n/**\n * Prefix.\n */\n\nvar prefix = '   vue-cli'\nvar sep = chalk.gray('·')\n\n/**\n * Log a `message` to the console.\n *\n * @param {String} message\n */\n\nexports.log = function () {\n  var msg = format.apply(format, arguments)\n  console.log(chalk.white(prefix), sep, msg)\n}\n\n/**\n * Log an error `message` to the console and exit.\n *\n * @param {String} message\n */\n\nexports.fatal = function (message) {\n  if (message instanceof Error) message = message.message.trim()\n  var msg = format.apply(format, arguments)\n  console.error(chalk.red(prefix), sep, msg)\n  process.exit(1)\n}\n\n/**\n * Log a success `message` to the console and exit.\n *\n * @param {String} message\n */\n\nexports.success = function () {\n  var msg = format.apply(format, arguments)\n  console.log(chalk.white(prefix), sep, msg)\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/server.js":"var path = require('path')\nvar express = require('express')\nvar proxyMiddleware = require('http-proxy-middleware')\n\nmodule.exports = function createServer (compiler, options) {\n  var server = express()\n\n  var devMiddleWare = require('webpack-dev-middleware')(compiler, {\n    quiet: true\n  })\n\n  server.use(devMiddleWare)\n  server.use(require('webpack-hot-middleware')(compiler, {\n    log: () => null\n  }))\n  server.use(require('connect-history-api-fallback')({index: '/'}))\n\n  var mfs = devMiddleWare.fileSystem\n  var file = path.join(compiler.options.output.path, 'index.html')\n\n  // proxy api requests\n  if (typeof options.proxy === 'string') {\n    server.use(proxyMiddleware('/api', {\n      target: options.proxy,\n      changeOrigin: true,\n      pathRewrite: {\n        '^/api': ''\n      }\n    }))\n  } else if (typeof options.proxy === 'object') {\n    Object.keys(options.proxy).forEach(function (context) {\n      var proxyOptions = options.proxy[context]\n      if (typeof proxyOptions === 'string') {\n        proxyOptions = {\n          target: proxyOptions,\n          changeOrigin: true,\n          pathRewrite: {\n            [`^${context}`]: ''\n          }\n        }\n      }\n      server.use(proxyMiddleware(context, proxyOptions))\n    })\n  }\n\n  server.get('/', (req, res) => {\n    devMiddleWare.waitUntilValid(() => {\n      const html = mfs.readFileSync(file)\n      res.end(html)\n    })\n  })\n\n  if (options.setup) {\n    options.setup(server)\n  }\n\n  return server\n}\n","/home/travis/build/npmtest/node-npmtest-vue-cli/node_modules/vue-cli/lib/warnings.js":"var chalk = require('chalk')\n\nmodule.exports = {\n  v2SuffixTemplatesDeprecated: function (template, name) {\n    var initCommand = 'vue init ' + template.replace('-2.0', '') + ' ' + name\n\n    console.log(chalk.red('  This template is deprecated, as the original template now uses Vue 2.0 by default.'))\n    console.log()\n    console.log(chalk.yellow('  Please use this command instead: ') + chalk.green(initCommand))\n    console.log()\n  },\n  v2BranchIsNowDefault: function (template, name) {\n    var vue1InitCommand = 'vue init ' + template + '#1.0' + ' ' + name\n\n    console.log(chalk.green('  This will install Vue 2.x version of the template.'))\n    console.log()\n    console.log(chalk.yellow('  For Vue 1.x use: ') + chalk.green(vue1InitCommand))\n    console.log()\n  }\n}\n"}